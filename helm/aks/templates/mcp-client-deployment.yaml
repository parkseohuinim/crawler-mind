{{- if .Values.mcpClient.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-client
  labels:
    app: mcp-client
spec:
  replicas: {{ .Values.mcpClient.replicaCount }}
  selector:
    matchLabels:
      app: mcp-client
  template:
    metadata:
      labels:
        app: mcp-client
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # 모든 의존 서비스 대기 (Kind 방식)
      initContainers:
        - name: wait-for-postgres
          image: postgres:15
          command:
            - sh
            - -c
            - >
              until pg_isready -h postgres -p 5432 -U admin;
              do echo "⏳ waiting for postgres";
              sleep 2;
              done;
        
        - name: wait-for-mcp-server
          image: curlimages/curl:latest
          command:
            - sh
            - -c
            - >
              until curl -f http://mcp-server:4200;
              do echo "⏳ waiting for mcp-server";
              sleep 2;
              done;
        
        - name: wait-for-opensearch
          image: curlimages/curl:latest
          command:
            - sh
            - -c
            - >
              until curl -f http://opensearch:9200;
              do echo "⏳ waiting for opensearch";
              sleep 2;
              done;
        
        - name: wait-for-qdrant
          image: curlimages/curl:latest
          command:
            - sh
            - -c
            - >
              until curl -f http://qdrant:6333;
              do echo "⏳ waiting for qdrant";
              sleep 2;
              done;

      containers:
        - name: mcp-client
          image: "{{ .Values.global.imageRegistry }}/{{ .Values.mcpClient.image.repository }}:{{ .Values.mcpClient.image.tag }}"
          imagePullPolicy: {{ .Values.mcpClient.image.pullPolicy }}

          # Kind 방식 Health Check (/health 사용)
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3

          env:
            - name: MCP_SERVER_URL
              value: {{ .Values.mcpClient.env.MCP_SERVER_URL | quote }}
            - name: CORS_ORIGINS
              value: {{ .Values.mcpClient.env.CORS_ORIGINS | quote }}
            - name: OPENAI_MODEL
              value: {{ .Values.mcpClient.env.OPENAI_MODEL | quote }}
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: mcp-client-secret
                  key: openai-api-key

            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: mcp-client-secret
                  key: database-url

            # OpenSearch - HOST와 PORT 둘 다 필요
            - name: OPENSEARCH_HOST
              value: {{ .Values.mcpClient.env.OPENSEARCH_HOST | quote }}
            - name: OPENSEARCH_PORT
              value: {{ .Values.mcpClient.env.OPENSEARCH_PORT | quote }}

            # Qdrant - HOST와 PORT 둘 다 필요
            - name: QDRANT_HOST
              value: {{ .Values.mcpClient.env.QDRANT_HOST | quote }}
            - name: QDRANT_PORT
              value: {{ .Values.mcpClient.env.QDRANT_PORT | quote }}

          ports:
            - containerPort: 8000
          resources:
            {{- toYaml .Values.mcpClient.resources | nindent 12 }}
{{- end }}
